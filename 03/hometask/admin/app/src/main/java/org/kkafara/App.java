/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.kkafara;

import com.rabbitmq.client.*;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.core.config.Configurator;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeoutException;

public class App {
  private static Logger logger;

  private static final String HOST = "localhost";
  private static final String ADMIN_EXCHANGE_ID = "ex_admin";
  private static final String TRADE_EXCHANGE_ID = "ex_trade";
  private static final String ORDER_QUEUE_ID = "q_vendors";
  private static final String ADMIN_QUEUE_ID = "q_admin";

  public static void main(String[] args) throws IOException, TimeoutException {
    logger = LogManager.getLogger(App.class);
    Configurator.setRootLevel(Level.DEBUG);

    logger.info("Admin started");

    String adminId = "admin";

    logger.info("Setting up admin for id: " + adminId);

    ConnectionFactory connectionFactory = new ConnectionFactory();

    logger.info("Setting host for connection: " + HOST);
    connectionFactory.setHost(HOST);

    Connection connection = connectionFactory.newConnection();
    Channel channel = connection.createChannel();
    Channel exchangeChannel = connectionFactory.newConnection().createChannel();

    logger.info("Maybe-create exchange for id: " + ADMIN_EXCHANGE_ID + " with type: TOPIC");
    exchangeChannel.exchangeDeclare(ADMIN_EXCHANGE_ID, BuiltinExchangeType.TOPIC);

    logger.info("Create queue for id: " + getQueueId(adminId));
    channel.queueDeclare(getQueueId(adminId), false, false, false, null);

    // load balancing
//    channel.basicQos(1);

    logger.info("Maybe-create exchange for id: " + TRADE_EXCHANGE_ID + " with type: FANOUT");
    channel.exchangeDeclare(TRADE_EXCHANGE_ID, BuiltinExchangeType.FANOUT);

    logger.info("Binding admin queue to trade exchange with routeKey: " + getRoutingKeyForAdminQueueForTradeExchange());
    channel.queueBind(getQueueId(adminId), TRADE_EXCHANGE_ID, getRoutingKeyForAdminQueueForTradeExchange());


    Consumer orderConsumer = new DefaultConsumer(channel) {
      @Override
      public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {
        String order = new String(body, StandardCharsets.UTF_8);
        logger.info("Admin with id: " + adminId + " received order: " + order);
//        logger.info("Sending ack");
//        channel.basicAck(envelope.getDeliveryTag(), false);
      }
    };


    logger.info("Start listening for orders");
    channel.basicConsume(getQueueId(adminId), false, orderConsumer);

    while (true) {
      String command = getCommand();

      if ("exit".equals(command)) {
        break;
      }

      String destination = getRouteKeyForCommand(command);
      logger.info("Sending command: " + command + " to: " + destination);
      exchangeChannel.basicPublish(ADMIN_EXCHANGE_ID, destination, null, command.getBytes(StandardCharsets.UTF_8));
    }

    logger.info("Quit");
  }

  public static String getCommand() throws IOException {
    logger.info("Awaiting for command...");
    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
    // TODO: Split the order!
    return bufferedReader.readLine();
  }

  public static String getRouteKeyForCommand(String command) {
    if (command.startsWith("C")) {
      return "client.placeholder";
    } else if (command.startsWith("V")) {
      return "placeholder.vendor";
    } else if (command.startsWith("ALL")) {
      return "client.vendor";
    } else {
      logger.error("Unrecognized target for command!");
      logger.error("Sending to all");
      return "client.vendor";
    }
  }

  private static String getRoutingKeyForAdminQueueForTradeExchange() {
//    return "org.kkafara." + ADMIN_QUEUE_ID;
    return "";
  }

  public static String getId() throws IOException {
    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
    return bufferedReader.readLine();
  }

  public static String getQueueId(String vendorId) {
    return ADMIN_QUEUE_ID;
  }

//  public static String getVendorsQueueId() {
//    return TRADE_EXCHANGE_ID;
//  }
}
