RESTART
...
actorMath: received command: divide
actorMath: sending to actorDivide
actorMultiply: received command: multiply
actorDivide: received command: divide
actorDivide: division result = 5 operation count: 1
actorDivide: sending response
actorMultiply: multiply result = 15  operation count: 1
actorMultiply: sending response
actorDivide: received command: divide
actorDivide: division result = 3 operation count: 2
actorDivide: sending response
actorDivide: received command: divide
actorMultiply: received command: multiply
actorMultiply: multiply result = 10  operation count: 2
actorMultiply: sending response
actorMath: received result: 5
actorMath: received result: 15
actorMath: received result: 3
actorMath: received result: 10
17:24:12.089 [actorMath-akka.actor.default-dispatcher-3] ERROR akka.actor.typed.Behavior$ - Supervisor RestartSupervisor saw failure: / by zero
java.lang.ArithmeticException: / by zero
	at edu.agh.reactive.math.MathActorDivide.onMathCommandDivide(MathActorDivide.java:31)
	at akka.actor.typed.javadsl.BuiltReceive.receive(ReceiveBuilder.scala:213)
	at akka.actor.typed.javadsl.BuiltReceive.receiveMessage(ReceiveBuilder.scala:204)
	at akka.actor.typed.javadsl.Receive.receive(Receive.scala:53)
	at akka.actor.typed.javadsl.AbstractBehavior.receive(AbstractBehavior.scala:64)
	at akka.actor.typed.Behavior$.interpret(Behavior.scala:274)
	...

	Math main: sending second package of messages
    Math main: messages send
    >>> Press ENTER to exit <<<
    actorMath: received command: multiply
    actorMath: sending to actorMultiply
    actorMath: received command: multiply
    actorMath: sending to actorMultiply
    actorMultiply: received command: multiply
    actorMath: received command: divide
    actorMath: sending to actorDivide
    actorMultiply: multiply result = 15  operation count: 3
    actorMultiply: sending response
    actorMath: received command: divide
    actorMath: sending to actorDivide
    actorMultiply: received command: multiply
    actorMultiply: multiply result = 10  operation count: 4
    actorMultiply: sending response
    actorMath: received result: 15
    actorMath: received result: 10
    actorDivide: received command: divide
    actorDivide: division result = 5 operation count: 1
...

STOP

...
actorDivide: received command: divide
actorMath: received command: divide
actorMath: sending to actorDivide
actorMultiply: received command: multiply
actorDivide: division result = 5 operation count: 1
actorDivide: sending response
actorMultiply: multiply result = 15  operation count: 1
actorMultiply: sending response
actorDivide: received command: divide
actorMultiply: received command: multiply
actorMultiply: multiply result = 10  operation count: 2
actorMultiply: sending response
actorDivide: division result = 3 operation count: 2
actorDivide: sending response
actorMath: received result: 5
actorDivide: received command: divide
actorMath: received result: 15
actorMath: received result: 10
actorMath: received result: 3
17:25:06.737 [actorMath-akka.actor.default-dispatcher-3] ERROR akka.actor.typed.Behavior$ - Supervisor StopSupervisor saw failure: / by zero
java.lang.ArithmeticException: / by zero
	at edu.agh.reactive.math.MathActorDivide.onMathCommandDivide(MathActorDivide.java:31)
	at akka.actor.typed.javadsl.BuiltReceive.receive(ReceiveBuilder.scala:213)
	at akka.actor.typed.javadsl.BuiltReceive.receiveMessage(ReceiveBuilder.scala:204)
	at akka.actor.typed.javadsl.Receive.receive(Receive.scala:53)
	at akka.actor.typed.javadsl.AbstractBehavior.receive(AbstractBehavior.scala:64)
	at akka.actor.typed.Behavior$.interpret(Behavior.scala:274)
	at akka.actor.typed.Behavior$.interpretMessage(Behavior.scala:230)
	at akka.actor.typed.internal.InterceptorImpl$$anon$2.apply(InterceptorImpl.scala:57)
	at akka.actor.typed.internal.SimpleSupervisor.aroundReceive(Supervision.scala:131)
	at akka.actor.typed.internal.InterceptorImpl.receive(InterceptorImpl.scala:85)
	at akka.actor.typed.Behavior$.interpret(Behavior.scala:274)
	at akka.actor.typed.Behavior$.interpretMessage(Behavior.scala:230)
	at akka.actor.typed.internal.adapter.ActorAdapter.handleMessage(ActorAdapter.scala:131)
	at akka.actor.typed.internal.adapter.ActorAdapter.aroundReceive(ActorAdapter.scala:107)
	at akka.actor.ActorCell.receiveMessage(ActorCell.scala:580)
	at akka.actor.ActorCell.invoke(ActorCell.scala:548)
	at akka.dispatch.Mailbox.processMailbox(Mailbox.scala:270)
	at akka.dispatch.Mailbox.run(Mailbox.scala:231)
	at akka.dispatch.Mailbox.exec(Mailbox.scala:243)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1016)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1665)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1598)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)
Math main: sending second package of messages
actorMath: received command: multiply
actorMath: sending to actorMultiply
Math main: messages send
actorMath: received command: multiply
actorMath: sending to actorMultiply
>>> Press ENTER to exit <<<
actorMultiply: received command: multiply
actorMultiply: multiply result = 15  operation count: 3
actorMultiply: sending response
actorMath: received command: divide
actorMath: sending to actorDivide
actorMultiply: received command: multiply
actorMultiply: multiply result = 10  operation count: 4
actorMultiply: sending response
actorMath: received command: divide
actorMath: sending to actorDivide
actorMath: received result: 15
actorMath: received result: 10
17:25:08.735 [actorMath-akka.actor.default-dispatcher-3] INFO akka.actor.LocalActorRef - Message [edu.agh.reactive.math.MathActor$MathCommandDivide] to Actor[akka://actorMath/user/actorDivide#-324074371] was not delivered. [1] dead letters encountered. If this is not an expected behavior then Actor[akka://actorMath/user/actorDivide#-324074371] may have terminated unexpectedly. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.
17:25:08.736 [actorMath-akka.actor.default-dispatcher-3] INFO akka.actor.LocalActorRef - Message [edu.agh.reactive.math.MathActor$MathCommandDivide] to Actor[akka://actorMath/user/actorDivide#-324074371] was not delivered. [2] dead letters encountered. If this is not an expected behavior then Actor[akka://actorMath/user/actorDivide#-324074371] may have terminated unexpectedly. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.


RESUME


...
actorMath: received command: divide
actorMath: sending to actorDivide
actorMath: received command: divide
actorMath: sending to actorDivide
actorDivide: received command: divide
actorMath: received command: divide
actorMath: sending to actorDivide
actorMultiply: received command: multiply
actorMultiply: multiply result = 15  operation count: 1
actorMultiply: sending response
actorMultiply: received command: multiply
actorMultiply: multiply result = 10  operation count: 2
actorMultiply: sending response
actorDivide: division result = 5 operation count: 1
actorDivide: sending response
actorDivide: received command: divide
actorDivide: division result = 3 operation count: 2
actorDivide: sending response
actorDivide: received command: divide
actorMath: received result: 15
actorMath: received result: 10
actorMath: received result: 5
actorMath: received result: 3
17:26:46.466 [actorMath-akka.actor.default-dispatcher-3] ERROR akka.actor.typed.Behavior$ - Supervisor ResumeSupervisor saw failure: / by zero
java.lang.ArithmeticException: / by zero
	at edu.agh.reactive.math.MathActorDivide.onMathCommandDivide(MathActorDivide.java:31)
	...
	...
Math main: sending second package of messages
Math main: messages send
>>> Press ENTER to exit <<<
actorMath: received command: multiply
actorMath: sending to actorMultiply
actorMath: received command: multiply
actorMath: sending to actorMultiply
actorMath: received command: divide
actorMath: sending to actorDivide
actorMultiply: received command: multiply
actorMath: received command: divide
actorMath: sending to actorDivide
actorMultiply: multiply result = 15  operation count: 3
actorMultiply: sending response
actorDivide: received command: divide
actorDivide: division result = 5 operation count: 3
actorDivide: sending response
actorMath: received result: 15
actorMultiply: received command: multiply
actorMultiply: multiply result = 10  operation count: 4
actorMultiply: sending response
actorDivide: received command: divide
actorDivide: division result = 3 operation count: 4
actorDivide: sending response
actorMath: received result: 5
actorMath: received result: 10
actorMath: received result: 3


