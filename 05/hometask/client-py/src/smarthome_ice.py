# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.7
#
# <auto-generated>
#
# Generated from file `smarthome.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Smarthome
_M_Smarthome = Ice.openModule('Smarthome')
__name__ = 'Smarthome'

if 'ExecutionException' not in _M_Smarthome.__dict__:
    _M_Smarthome.ExecutionException = Ice.createTempClass()
    class ExecutionException(Ice.UserException):
        def __init__(self, description=''):
            self.description = description

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Smarthome::ExecutionException'

    _M_Smarthome._t_ExecutionException = IcePy.defineException('::Smarthome::ExecutionException', ExecutionException, (), False, None, (('description', (), IcePy._t_string, False, 0),))
    ExecutionException._ice_type = _M_Smarthome._t_ExecutionException

    _M_Smarthome.ExecutionException = ExecutionException
    del ExecutionException

if 'DeviceStatus' not in _M_Smarthome.__dict__:
    _M_Smarthome.DeviceStatus = Ice.createTempClass()
    class DeviceStatus(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    DeviceStatus.On = DeviceStatus("On", 0)
    DeviceStatus.Off = DeviceStatus("Off", 1)
    DeviceStatus.Unknown = DeviceStatus("Unknown", 2)
    DeviceStatus._enumerators = { 0:DeviceStatus.On, 1:DeviceStatus.Off, 2:DeviceStatus.Unknown }

    _M_Smarthome._t_DeviceStatus = IcePy.defineEnum('::Smarthome::DeviceStatus', DeviceStatus, (), DeviceStatus._enumerators)

    _M_Smarthome.DeviceStatus = DeviceStatus
    del DeviceStatus

if 'Time' not in _M_Smarthome.__dict__:
    _M_Smarthome.Time = Ice.createTempClass()
    class Time(object):
        def __init__(self, minutes=0, hour=0):
            self.minutes = minutes
            self.hour = hour

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.minutes)
            _h = 5 * _h + Ice.getHash(self.hour)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Smarthome.Time):
                return NotImplemented
            else:
                if self.minutes is None or other.minutes is None:
                    if self.minutes != other.minutes:
                        return (-1 if self.minutes is None else 1)
                else:
                    if self.minutes < other.minutes:
                        return -1
                    elif self.minutes > other.minutes:
                        return 1
                if self.hour is None or other.hour is None:
                    if self.hour != other.hour:
                        return (-1 if self.hour is None else 1)
                else:
                    if self.hour < other.hour:
                        return -1
                    elif self.hour > other.hour:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_Time)

        __repr__ = __str__

    _M_Smarthome._t_Time = IcePy.defineStruct('::Smarthome::Time', Time, (), (
        ('minutes', (), IcePy._t_int),
        ('hour', (), IcePy._t_int)
    ))

    _M_Smarthome.Time = Time
    del Time

if 'DeviceMetadata' not in _M_Smarthome.__dict__:
    _M_Smarthome.DeviceMetadata = Ice.createTempClass()
    class DeviceMetadata(object):
        def __init__(self, description='', status=_M_Smarthome.DeviceStatus.On, id=0):
            self.description = description
            self.status = status
            self.id = id

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.description)
            _h = 5 * _h + Ice.getHash(self.status)
            _h = 5 * _h + Ice.getHash(self.id)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Smarthome.DeviceMetadata):
                return NotImplemented
            else:
                if self.description is None or other.description is None:
                    if self.description != other.description:
                        return (-1 if self.description is None else 1)
                else:
                    if self.description < other.description:
                        return -1
                    elif self.description > other.description:
                        return 1
                if self.status is None or other.status is None:
                    if self.status != other.status:
                        return (-1 if self.status is None else 1)
                else:
                    if self.status < other.status:
                        return -1
                    elif self.status > other.status:
                        return 1
                if self.id is None or other.id is None:
                    if self.id != other.id:
                        return (-1 if self.id is None else 1)
                else:
                    if self.id < other.id:
                        return -1
                    elif self.id > other.id:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_DeviceMetadata)

        __repr__ = __str__

    _M_Smarthome._t_DeviceMetadata = IcePy.defineStruct('::Smarthome::DeviceMetadata', DeviceMetadata, (), (
        ('description', (), IcePy._t_string),
        ('status', (), _M_Smarthome._t_DeviceStatus),
        ('id', (), IcePy._t_long)
    ))

    _M_Smarthome.DeviceMetadata = DeviceMetadata
    del DeviceMetadata

_M_Smarthome._t_IDevice = IcePy.defineValue('::Smarthome::IDevice', Ice.Value, -1, (), False, True, None, ())

if 'IDevicePrx' not in _M_Smarthome.__dict__:
    _M_Smarthome.IDevicePrx = Ice.createTempClass()
    class IDevicePrx(Ice.ObjectPrx):

        def getMetadata(self, context=None):
            return _M_Smarthome.IDevice._op_getMetadata.invoke(self, ((), context))

        def getMetadataAsync(self, context=None):
            return _M_Smarthome.IDevice._op_getMetadata.invokeAsync(self, ((), context))

        def begin_getMetadata(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.IDevice._op_getMetadata.begin(self, ((), _response, _ex, _sent, context))

        def end_getMetadata(self, _r):
            return _M_Smarthome.IDevice._op_getMetadata.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.IDevicePrx.ice_checkedCast(proxy, '::Smarthome::IDevice', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.IDevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::IDevice'
    _M_Smarthome._t_IDevicePrx = IcePy.defineProxy('::Smarthome::IDevice', IDevicePrx)

    _M_Smarthome.IDevicePrx = IDevicePrx
    del IDevicePrx

    _M_Smarthome.IDevice = Ice.createTempClass()
    class IDevice(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::IDevice')

        def ice_id(self, current=None):
            return '::Smarthome::IDevice'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::IDevice'

        def getMetadata(self, current=None):
            raise NotImplementedError("servant method 'getMetadata' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_IDeviceDisp)

        __repr__ = __str__

    _M_Smarthome._t_IDeviceDisp = IcePy.defineClass('::Smarthome::IDevice', IDevice, (), None, ())
    IDevice._ice_type = _M_Smarthome._t_IDeviceDisp

    IDevice._op_getMetadata = IcePy.Operation('getMetadata', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Smarthome._t_DeviceMetadata, False, 0), ())

    _M_Smarthome.IDevice = IDevice
    del IDevice

_M_Smarthome._t_IDeviceStatusController = IcePy.defineValue('::Smarthome::IDeviceStatusController', Ice.Value, -1, (), False, True, None, ())

if 'IDeviceStatusControllerPrx' not in _M_Smarthome.__dict__:
    _M_Smarthome.IDeviceStatusControllerPrx = Ice.createTempClass()
    class IDeviceStatusControllerPrx(_M_Smarthome.IDevicePrx):

        def turnOn(self, context=None):
            return _M_Smarthome.IDeviceStatusController._op_turnOn.invoke(self, ((), context))

        def turnOnAsync(self, context=None):
            return _M_Smarthome.IDeviceStatusController._op_turnOn.invokeAsync(self, ((), context))

        def begin_turnOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.IDeviceStatusController._op_turnOn.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOn(self, _r):
            return _M_Smarthome.IDeviceStatusController._op_turnOn.end(self, _r)

        def turnOff(self, context=None):
            return _M_Smarthome.IDeviceStatusController._op_turnOff.invoke(self, ((), context))

        def turnOffAsync(self, context=None):
            return _M_Smarthome.IDeviceStatusController._op_turnOff.invokeAsync(self, ((), context))

        def begin_turnOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.IDeviceStatusController._op_turnOff.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOff(self, _r):
            return _M_Smarthome.IDeviceStatusController._op_turnOff.end(self, _r)

        def getStatus(self, context=None):
            return _M_Smarthome.IDeviceStatusController._op_getStatus.invoke(self, ((), context))

        def getStatusAsync(self, context=None):
            return _M_Smarthome.IDeviceStatusController._op_getStatus.invokeAsync(self, ((), context))

        def begin_getStatus(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.IDeviceStatusController._op_getStatus.begin(self, ((), _response, _ex, _sent, context))

        def end_getStatus(self, _r):
            return _M_Smarthome.IDeviceStatusController._op_getStatus.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.IDeviceStatusControllerPrx.ice_checkedCast(proxy, '::Smarthome::IDeviceStatusController', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.IDeviceStatusControllerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::IDeviceStatusController'
    _M_Smarthome._t_IDeviceStatusControllerPrx = IcePy.defineProxy('::Smarthome::IDeviceStatusController', IDeviceStatusControllerPrx)

    _M_Smarthome.IDeviceStatusControllerPrx = IDeviceStatusControllerPrx
    del IDeviceStatusControllerPrx

    _M_Smarthome.IDeviceStatusController = Ice.createTempClass()
    class IDeviceStatusController(_M_Smarthome.IDevice):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::IDevice', '::Smarthome::IDeviceStatusController')

        def ice_id(self, current=None):
            return '::Smarthome::IDeviceStatusController'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::IDeviceStatusController'

        def turnOn(self, current=None):
            raise NotImplementedError("servant method 'turnOn' not implemented")

        def turnOff(self, current=None):
            raise NotImplementedError("servant method 'turnOff' not implemented")

        def getStatus(self, current=None):
            raise NotImplementedError("servant method 'getStatus' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_IDeviceStatusControllerDisp)

        __repr__ = __str__

    _M_Smarthome._t_IDeviceStatusControllerDisp = IcePy.defineClass('::Smarthome::IDeviceStatusController', IDeviceStatusController, (), None, (_M_Smarthome._t_IDeviceDisp,))
    IDeviceStatusController._ice_type = _M_Smarthome._t_IDeviceStatusControllerDisp

    IDeviceStatusController._op_turnOn = IcePy.Operation('turnOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    IDeviceStatusController._op_turnOff = IcePy.Operation('turnOff', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    IDeviceStatusController._op_getStatus = IcePy.Operation('getStatus', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Smarthome._t_DeviceStatus, False, 0), ())

    _M_Smarthome.IDeviceStatusController = IDeviceStatusController
    del IDeviceStatusController

if '_t_DeviceList' not in _M_Smarthome.__dict__:
    _M_Smarthome._t_DeviceList = IcePy.defineSequence('::Smarthome::DeviceList', (), _M_Smarthome._t_DeviceMetadata)

# Start of module Smarthome.Controller
_M_Smarthome.Controller = Ice.openModule('Smarthome.Controller')
__name__ = 'Smarthome.Controller'

_M_Smarthome.Controller._t_SmartHomeController = IcePy.defineValue('::Smarthome::Controller::SmartHomeController', Ice.Value, -1, (), False, True, None, ())

if 'SmartHomeControllerPrx' not in _M_Smarthome.Controller.__dict__:
    _M_Smarthome.Controller.SmartHomeControllerPrx = Ice.createTempClass()
    class SmartHomeControllerPrx(Ice.ObjectPrx):

        def getDevices(self, context=None):
            return _M_Smarthome.Controller.SmartHomeController._op_getDevices.invoke(self, ((), context))

        def getDevicesAsync(self, context=None):
            return _M_Smarthome.Controller.SmartHomeController._op_getDevices.invokeAsync(self, ((), context))

        def begin_getDevices(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Controller.SmartHomeController._op_getDevices.begin(self, ((), _response, _ex, _sent, context))

        def end_getDevices(self, _r):
            return _M_Smarthome.Controller.SmartHomeController._op_getDevices.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.Controller.SmartHomeControllerPrx.ice_checkedCast(proxy, '::Smarthome::Controller::SmartHomeController', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.Controller.SmartHomeControllerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Controller::SmartHomeController'
    _M_Smarthome.Controller._t_SmartHomeControllerPrx = IcePy.defineProxy('::Smarthome::Controller::SmartHomeController', SmartHomeControllerPrx)

    _M_Smarthome.Controller.SmartHomeControllerPrx = SmartHomeControllerPrx
    del SmartHomeControllerPrx

    _M_Smarthome.Controller.SmartHomeController = Ice.createTempClass()
    class SmartHomeController(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::Controller::SmartHomeController')

        def ice_id(self, current=None):
            return '::Smarthome::Controller::SmartHomeController'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Controller::SmartHomeController'

        def getDevices(self, current=None):
            raise NotImplementedError("servant method 'getDevices' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome.Controller._t_SmartHomeControllerDisp)

        __repr__ = __str__

    _M_Smarthome.Controller._t_SmartHomeControllerDisp = IcePy.defineClass('::Smarthome::Controller::SmartHomeController', SmartHomeController, (), None, ())
    SmartHomeController._ice_type = _M_Smarthome.Controller._t_SmartHomeControllerDisp

    SmartHomeController._op_getDevices = IcePy.Operation('getDevices', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Smarthome._t_DeviceList, False, 0), ())

    _M_Smarthome.Controller.SmartHomeController = SmartHomeController
    del SmartHomeController

# End of module Smarthome.Controller

__name__ = 'Smarthome'

# Start of module Smarthome.AirConditioning
_M_Smarthome.AirConditioning = Ice.openModule('Smarthome.AirConditioning')
__name__ = 'Smarthome.AirConditioning'

_M_Smarthome.AirConditioning._t_IAirConditioner = IcePy.defineValue('::Smarthome::AirConditioning::IAirConditioner', Ice.Value, -1, (), False, True, None, ())

if 'IAirConditionerPrx' not in _M_Smarthome.AirConditioning.__dict__:
    _M_Smarthome.AirConditioning.IAirConditionerPrx = Ice.createTempClass()
    class IAirConditionerPrx(_M_Smarthome.IDeviceStatusControllerPrx):

        def setTargetTemp(self, temp, context=None):
            return _M_Smarthome.AirConditioning.IAirConditioner._op_setTargetTemp.invoke(self, ((temp, ), context))

        def setTargetTempAsync(self, temp, context=None):
            return _M_Smarthome.AirConditioning.IAirConditioner._op_setTargetTemp.invokeAsync(self, ((temp, ), context))

        def begin_setTargetTemp(self, temp, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.AirConditioning.IAirConditioner._op_setTargetTemp.begin(self, ((temp, ), _response, _ex, _sent, context))

        def end_setTargetTemp(self, _r):
            return _M_Smarthome.AirConditioning.IAirConditioner._op_setTargetTemp.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.AirConditioning.IAirConditionerPrx.ice_checkedCast(proxy, '::Smarthome::AirConditioning::IAirConditioner', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.AirConditioning.IAirConditionerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::AirConditioning::IAirConditioner'
    _M_Smarthome.AirConditioning._t_IAirConditionerPrx = IcePy.defineProxy('::Smarthome::AirConditioning::IAirConditioner', IAirConditionerPrx)

    _M_Smarthome.AirConditioning.IAirConditionerPrx = IAirConditionerPrx
    del IAirConditionerPrx

    _M_Smarthome.AirConditioning.IAirConditioner = Ice.createTempClass()
    class IAirConditioner(_M_Smarthome.IDeviceStatusController):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::AirConditioning::IAirConditioner', '::Smarthome::IDevice', '::Smarthome::IDeviceStatusController')

        def ice_id(self, current=None):
            return '::Smarthome::AirConditioning::IAirConditioner'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::AirConditioning::IAirConditioner'

        def setTargetTemp(self, temp, current=None):
            raise NotImplementedError("servant method 'setTargetTemp' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome.AirConditioning._t_IAirConditionerDisp)

        __repr__ = __str__

    _M_Smarthome.AirConditioning._t_IAirConditionerDisp = IcePy.defineClass('::Smarthome::AirConditioning::IAirConditioner', IAirConditioner, (), None, (_M_Smarthome._t_IDeviceStatusControllerDisp,))
    IAirConditioner._ice_type = _M_Smarthome.AirConditioning._t_IAirConditionerDisp

    IAirConditioner._op_setTargetTemp = IcePy.Operation('setTargetTemp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, (_M_Smarthome._t_ExecutionException,))

    _M_Smarthome.AirConditioning.IAirConditioner = IAirConditioner
    del IAirConditioner

_M_Smarthome.AirConditioning._t_IZoneAirConditioner = IcePy.defineValue('::Smarthome::AirConditioning::IZoneAirConditioner', Ice.Value, -1, (), False, True, None, ())

if 'IZoneAirConditionerPrx' not in _M_Smarthome.AirConditioning.__dict__:
    _M_Smarthome.AirConditioning.IZoneAirConditionerPrx = Ice.createTempClass()
    class IZoneAirConditionerPrx(_M_Smarthome.AirConditioning.IAirConditionerPrx):

        def setTargetTempForZone(self, temp, areaId, context=None):
            return _M_Smarthome.AirConditioning.IZoneAirConditioner._op_setTargetTempForZone.invoke(self, ((temp, areaId), context))

        def setTargetTempForZoneAsync(self, temp, areaId, context=None):
            return _M_Smarthome.AirConditioning.IZoneAirConditioner._op_setTargetTempForZone.invokeAsync(self, ((temp, areaId), context))

        def begin_setTargetTempForZone(self, temp, areaId, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.AirConditioning.IZoneAirConditioner._op_setTargetTempForZone.begin(self, ((temp, areaId), _response, _ex, _sent, context))

        def end_setTargetTempForZone(self, _r):
            return _M_Smarthome.AirConditioning.IZoneAirConditioner._op_setTargetTempForZone.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.AirConditioning.IZoneAirConditionerPrx.ice_checkedCast(proxy, '::Smarthome::AirConditioning::IZoneAirConditioner', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.AirConditioning.IZoneAirConditionerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::AirConditioning::IZoneAirConditioner'
    _M_Smarthome.AirConditioning._t_IZoneAirConditionerPrx = IcePy.defineProxy('::Smarthome::AirConditioning::IZoneAirConditioner', IZoneAirConditionerPrx)

    _M_Smarthome.AirConditioning.IZoneAirConditionerPrx = IZoneAirConditionerPrx
    del IZoneAirConditionerPrx

    _M_Smarthome.AirConditioning.IZoneAirConditioner = Ice.createTempClass()
    class IZoneAirConditioner(_M_Smarthome.AirConditioning.IAirConditioner):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::AirConditioning::IAirConditioner', '::Smarthome::AirConditioning::IZoneAirConditioner', '::Smarthome::IDevice', '::Smarthome::IDeviceStatusController')

        def ice_id(self, current=None):
            return '::Smarthome::AirConditioning::IZoneAirConditioner'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::AirConditioning::IZoneAirConditioner'

        def setTargetTempForZone(self, temp, areaId, current=None):
            raise NotImplementedError("servant method 'setTargetTempForZone' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome.AirConditioning._t_IZoneAirConditionerDisp)

        __repr__ = __str__

    _M_Smarthome.AirConditioning._t_IZoneAirConditionerDisp = IcePy.defineClass('::Smarthome::AirConditioning::IZoneAirConditioner', IZoneAirConditioner, (), None, (_M_Smarthome.AirConditioning._t_IAirConditionerDisp,))
    IZoneAirConditioner._ice_type = _M_Smarthome.AirConditioning._t_IZoneAirConditionerDisp

    IZoneAirConditioner._op_setTargetTempForZone = IcePy.Operation('setTargetTempForZone', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_Smarthome._t_ExecutionException,))

    _M_Smarthome.AirConditioning.IZoneAirConditioner = IZoneAirConditioner
    del IZoneAirConditioner

_M_Smarthome.AirConditioning._t_ITimedAirConditioner = IcePy.defineValue('::Smarthome::AirConditioning::ITimedAirConditioner', Ice.Value, -1, (), False, True, None, ())

if 'ITimedAirConditionerPrx' not in _M_Smarthome.AirConditioning.__dict__:
    _M_Smarthome.AirConditioning.ITimedAirConditionerPrx = Ice.createTempClass()
    class ITimedAirConditionerPrx(_M_Smarthome.AirConditioning.IAirConditionerPrx):

        def setTargetTempForTime(self, temp, time, context=None):
            return _M_Smarthome.AirConditioning.ITimedAirConditioner._op_setTargetTempForTime.invoke(self, ((temp, time), context))

        def setTargetTempForTimeAsync(self, temp, time, context=None):
            return _M_Smarthome.AirConditioning.ITimedAirConditioner._op_setTargetTempForTime.invokeAsync(self, ((temp, time), context))

        def begin_setTargetTempForTime(self, temp, time, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.AirConditioning.ITimedAirConditioner._op_setTargetTempForTime.begin(self, ((temp, time), _response, _ex, _sent, context))

        def end_setTargetTempForTime(self, _r):
            return _M_Smarthome.AirConditioning.ITimedAirConditioner._op_setTargetTempForTime.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.AirConditioning.ITimedAirConditionerPrx.ice_checkedCast(proxy, '::Smarthome::AirConditioning::ITimedAirConditioner', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.AirConditioning.ITimedAirConditionerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::AirConditioning::ITimedAirConditioner'
    _M_Smarthome.AirConditioning._t_ITimedAirConditionerPrx = IcePy.defineProxy('::Smarthome::AirConditioning::ITimedAirConditioner', ITimedAirConditionerPrx)

    _M_Smarthome.AirConditioning.ITimedAirConditionerPrx = ITimedAirConditionerPrx
    del ITimedAirConditionerPrx

    _M_Smarthome.AirConditioning.ITimedAirConditioner = Ice.createTempClass()
    class ITimedAirConditioner(_M_Smarthome.AirConditioning.IAirConditioner):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::AirConditioning::IAirConditioner', '::Smarthome::AirConditioning::ITimedAirConditioner', '::Smarthome::IDevice', '::Smarthome::IDeviceStatusController')

        def ice_id(self, current=None):
            return '::Smarthome::AirConditioning::ITimedAirConditioner'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::AirConditioning::ITimedAirConditioner'

        def setTargetTempForTime(self, temp, time, current=None):
            raise NotImplementedError("servant method 'setTargetTempForTime' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome.AirConditioning._t_ITimedAirConditionerDisp)

        __repr__ = __str__

    _M_Smarthome.AirConditioning._t_ITimedAirConditionerDisp = IcePy.defineClass('::Smarthome::AirConditioning::ITimedAirConditioner', ITimedAirConditioner, (), None, (_M_Smarthome.AirConditioning._t_IAirConditionerDisp,))
    ITimedAirConditioner._ice_type = _M_Smarthome.AirConditioning._t_ITimedAirConditionerDisp

    ITimedAirConditioner._op_setTargetTempForTime = IcePy.Operation('setTargetTempForTime', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0), ((), _M_Smarthome._t_Time, False, 0)), (), None, (_M_Smarthome._t_ExecutionException,))

    _M_Smarthome.AirConditioning.ITimedAirConditioner = ITimedAirConditioner
    del ITimedAirConditioner

_M_Smarthome.AirConditioning._t_ISmartAirConditioner = IcePy.defineValue('::Smarthome::AirConditioning::ISmartAirConditioner', Ice.Value, -1, (), False, True, None, ())

if 'ISmartAirConditionerPrx' not in _M_Smarthome.AirConditioning.__dict__:
    _M_Smarthome.AirConditioning.ISmartAirConditionerPrx = Ice.createTempClass()
    class ISmartAirConditionerPrx(_M_Smarthome.AirConditioning.IZoneAirConditionerPrx, _M_Smarthome.AirConditioning.ITimedAirConditionerPrx):

        def turnOnEnergySavingMode(self, context=None):
            return _M_Smarthome.AirConditioning.ISmartAirConditioner._op_turnOnEnergySavingMode.invoke(self, ((), context))

        def turnOnEnergySavingModeAsync(self, context=None):
            return _M_Smarthome.AirConditioning.ISmartAirConditioner._op_turnOnEnergySavingMode.invokeAsync(self, ((), context))

        def begin_turnOnEnergySavingMode(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.AirConditioning.ISmartAirConditioner._op_turnOnEnergySavingMode.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOnEnergySavingMode(self, _r):
            return _M_Smarthome.AirConditioning.ISmartAirConditioner._op_turnOnEnergySavingMode.end(self, _r)

        def turnOffEnergySavingMode(self, context=None):
            return _M_Smarthome.AirConditioning.ISmartAirConditioner._op_turnOffEnergySavingMode.invoke(self, ((), context))

        def turnOffEnergySavingModeAsync(self, context=None):
            return _M_Smarthome.AirConditioning.ISmartAirConditioner._op_turnOffEnergySavingMode.invokeAsync(self, ((), context))

        def begin_turnOffEnergySavingMode(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.AirConditioning.ISmartAirConditioner._op_turnOffEnergySavingMode.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOffEnergySavingMode(self, _r):
            return _M_Smarthome.AirConditioning.ISmartAirConditioner._op_turnOffEnergySavingMode.end(self, _r)

        def getCurrentTemp(self, context=None):
            return _M_Smarthome.AirConditioning.ISmartAirConditioner._op_getCurrentTemp.invoke(self, ((), context))

        def getCurrentTempAsync(self, context=None):
            return _M_Smarthome.AirConditioning.ISmartAirConditioner._op_getCurrentTemp.invokeAsync(self, ((), context))

        def begin_getCurrentTemp(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.AirConditioning.ISmartAirConditioner._op_getCurrentTemp.begin(self, ((), _response, _ex, _sent, context))

        def end_getCurrentTemp(self, _r):
            return _M_Smarthome.AirConditioning.ISmartAirConditioner._op_getCurrentTemp.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.AirConditioning.ISmartAirConditionerPrx.ice_checkedCast(proxy, '::Smarthome::AirConditioning::ISmartAirConditioner', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.AirConditioning.ISmartAirConditionerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::AirConditioning::ISmartAirConditioner'
    _M_Smarthome.AirConditioning._t_ISmartAirConditionerPrx = IcePy.defineProxy('::Smarthome::AirConditioning::ISmartAirConditioner', ISmartAirConditionerPrx)

    _M_Smarthome.AirConditioning.ISmartAirConditionerPrx = ISmartAirConditionerPrx
    del ISmartAirConditionerPrx

    _M_Smarthome.AirConditioning.ISmartAirConditioner = Ice.createTempClass()
    class ISmartAirConditioner(_M_Smarthome.AirConditioning.IZoneAirConditioner, _M_Smarthome.AirConditioning.ITimedAirConditioner):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::AirConditioning::IAirConditioner', '::Smarthome::AirConditioning::ISmartAirConditioner', '::Smarthome::AirConditioning::ITimedAirConditioner', '::Smarthome::AirConditioning::IZoneAirConditioner', '::Smarthome::IDevice', '::Smarthome::IDeviceStatusController')

        def ice_id(self, current=None):
            return '::Smarthome::AirConditioning::ISmartAirConditioner'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::AirConditioning::ISmartAirConditioner'

        def turnOnEnergySavingMode(self, current=None):
            raise NotImplementedError("servant method 'turnOnEnergySavingMode' not implemented")

        def turnOffEnergySavingMode(self, current=None):
            raise NotImplementedError("servant method 'turnOffEnergySavingMode' not implemented")

        def getCurrentTemp(self, current=None):
            raise NotImplementedError("servant method 'getCurrentTemp' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome.AirConditioning._t_ISmartAirConditionerDisp)

        __repr__ = __str__

    _M_Smarthome.AirConditioning._t_ISmartAirConditionerDisp = IcePy.defineClass('::Smarthome::AirConditioning::ISmartAirConditioner', ISmartAirConditioner, (), None, (_M_Smarthome.AirConditioning._t_IZoneAirConditionerDisp, _M_Smarthome.AirConditioning._t_ITimedAirConditionerDisp))
    ISmartAirConditioner._ice_type = _M_Smarthome.AirConditioning._t_ISmartAirConditionerDisp

    ISmartAirConditioner._op_turnOnEnergySavingMode = IcePy.Operation('turnOnEnergySavingMode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    ISmartAirConditioner._op_turnOffEnergySavingMode = IcePy.Operation('turnOffEnergySavingMode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    ISmartAirConditioner._op_getCurrentTemp = IcePy.Operation('getCurrentTemp', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())

    _M_Smarthome.AirConditioning.ISmartAirConditioner = ISmartAirConditioner
    del ISmartAirConditioner

# End of module Smarthome.AirConditioning

__name__ = 'Smarthome'

# Start of module Smarthome.Heating
_M_Smarthome.Heating = Ice.openModule('Smarthome.Heating')
__name__ = 'Smarthome.Heating'

_M_Smarthome.Heating._t_IWaterHeater = IcePy.defineValue('::Smarthome::Heating::IWaterHeater', Ice.Value, -1, (), False, True, None, ())

if 'IWaterHeaterPrx' not in _M_Smarthome.Heating.__dict__:
    _M_Smarthome.Heating.IWaterHeaterPrx = Ice.createTempClass()
    class IWaterHeaterPrx(_M_Smarthome.IDeviceStatusControllerPrx):

        def setWaterTempForTime(self, temp, time, context=None):
            return _M_Smarthome.Heating.IWaterHeater._op_setWaterTempForTime.invoke(self, ((temp, time), context))

        def setWaterTempForTimeAsync(self, temp, time, context=None):
            return _M_Smarthome.Heating.IWaterHeater._op_setWaterTempForTime.invokeAsync(self, ((temp, time), context))

        def begin_setWaterTempForTime(self, temp, time, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Heating.IWaterHeater._op_setWaterTempForTime.begin(self, ((temp, time), _response, _ex, _sent, context))

        def end_setWaterTempForTime(self, _r):
            return _M_Smarthome.Heating.IWaterHeater._op_setWaterTempForTime.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.Heating.IWaterHeaterPrx.ice_checkedCast(proxy, '::Smarthome::Heating::IWaterHeater', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.Heating.IWaterHeaterPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Heating::IWaterHeater'
    _M_Smarthome.Heating._t_IWaterHeaterPrx = IcePy.defineProxy('::Smarthome::Heating::IWaterHeater', IWaterHeaterPrx)

    _M_Smarthome.Heating.IWaterHeaterPrx = IWaterHeaterPrx
    del IWaterHeaterPrx

    _M_Smarthome.Heating.IWaterHeater = Ice.createTempClass()
    class IWaterHeater(_M_Smarthome.IDeviceStatusController):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::Heating::IWaterHeater', '::Smarthome::IDevice', '::Smarthome::IDeviceStatusController')

        def ice_id(self, current=None):
            return '::Smarthome::Heating::IWaterHeater'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Heating::IWaterHeater'

        def setWaterTempForTime(self, temp, time, current=None):
            raise NotImplementedError("servant method 'setWaterTempForTime' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome.Heating._t_IWaterHeaterDisp)

        __repr__ = __str__

    _M_Smarthome.Heating._t_IWaterHeaterDisp = IcePy.defineClass('::Smarthome::Heating::IWaterHeater', IWaterHeater, (), None, (_M_Smarthome._t_IDeviceStatusControllerDisp,))
    IWaterHeater._ice_type = _M_Smarthome.Heating._t_IWaterHeaterDisp

    IWaterHeater._op_setWaterTempForTime = IcePy.Operation('setWaterTempForTime', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0), ((), _M_Smarthome._t_Time, True, 1)), (), None, (_M_Smarthome._t_ExecutionException,))

    _M_Smarthome.Heating.IWaterHeater = IWaterHeater
    del IWaterHeater

# End of module Smarthome.Heating

__name__ = 'Smarthome'

# Start of module Smarthome.Kitchen
_M_Smarthome.Kitchen = Ice.openModule('Smarthome.Kitchen')
__name__ = 'Smarthome.Kitchen'

_M_Smarthome.Kitchen._t_IOven = IcePy.defineValue('::Smarthome::Kitchen::IOven', Ice.Value, -1, (), False, True, None, ())

if 'IOvenPrx' not in _M_Smarthome.Kitchen.__dict__:
    _M_Smarthome.Kitchen.IOvenPrx = Ice.createTempClass()
    class IOvenPrx(_M_Smarthome.IDeviceStatusControllerPrx):

        def preheat(self, temp, context=None):
            return _M_Smarthome.Kitchen.IOven._op_preheat.invoke(self, ((temp, ), context))

        def preheatAsync(self, temp, context=None):
            return _M_Smarthome.Kitchen.IOven._op_preheat.invokeAsync(self, ((temp, ), context))

        def begin_preheat(self, temp, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Kitchen.IOven._op_preheat.begin(self, ((temp, ), _response, _ex, _sent, context))

        def end_preheat(self, _r):
            return _M_Smarthome.Kitchen.IOven._op_preheat.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.Kitchen.IOvenPrx.ice_checkedCast(proxy, '::Smarthome::Kitchen::IOven', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.Kitchen.IOvenPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Kitchen::IOven'
    _M_Smarthome.Kitchen._t_IOvenPrx = IcePy.defineProxy('::Smarthome::Kitchen::IOven', IOvenPrx)

    _M_Smarthome.Kitchen.IOvenPrx = IOvenPrx
    del IOvenPrx

    _M_Smarthome.Kitchen.IOven = Ice.createTempClass()
    class IOven(_M_Smarthome.IDeviceStatusController):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::IDevice', '::Smarthome::IDeviceStatusController', '::Smarthome::Kitchen::IOven')

        def ice_id(self, current=None):
            return '::Smarthome::Kitchen::IOven'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Kitchen::IOven'

        def preheat(self, temp, current=None):
            raise NotImplementedError("servant method 'preheat' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome.Kitchen._t_IOvenDisp)

        __repr__ = __str__

    _M_Smarthome.Kitchen._t_IOvenDisp = IcePy.defineClass('::Smarthome::Kitchen::IOven', IOven, (), None, (_M_Smarthome._t_IDeviceStatusControllerDisp,))
    IOven._ice_type = _M_Smarthome.Kitchen._t_IOvenDisp

    IOven._op_preheat = IcePy.Operation('preheat', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, (_M_Smarthome._t_ExecutionException,))

    _M_Smarthome.Kitchen.IOven = IOven
    del IOven

# End of module Smarthome.Kitchen

__name__ = 'Smarthome'

# Start of module Smarthome.Lighting
_M_Smarthome.Lighting = Ice.openModule('Smarthome.Lighting')
__name__ = 'Smarthome.Lighting'

_M_Smarthome.Lighting._t_IBlindsManager = IcePy.defineValue('::Smarthome::Lighting::IBlindsManager', Ice.Value, -1, (), False, True, None, ())

if 'IBlindsManagerPrx' not in _M_Smarthome.Lighting.__dict__:
    _M_Smarthome.Lighting.IBlindsManagerPrx = Ice.createTempClass()
    class IBlindsManagerPrx(_M_Smarthome.IDeviceStatusControllerPrx):

        def draw(self, context=None):
            return _M_Smarthome.Lighting.IBlindsManager._op_draw.invoke(self, ((), context))

        def drawAsync(self, context=None):
            return _M_Smarthome.Lighting.IBlindsManager._op_draw.invokeAsync(self, ((), context))

        def begin_draw(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Lighting.IBlindsManager._op_draw.begin(self, ((), _response, _ex, _sent, context))

        def end_draw(self, _r):
            return _M_Smarthome.Lighting.IBlindsManager._op_draw.end(self, _r)

        def undraw(self, context=None):
            return _M_Smarthome.Lighting.IBlindsManager._op_undraw.invoke(self, ((), context))

        def undrawAsync(self, context=None):
            return _M_Smarthome.Lighting.IBlindsManager._op_undraw.invokeAsync(self, ((), context))

        def begin_undraw(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Lighting.IBlindsManager._op_undraw.begin(self, ((), _response, _ex, _sent, context))

        def end_undraw(self, _r):
            return _M_Smarthome.Lighting.IBlindsManager._op_undraw.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.Lighting.IBlindsManagerPrx.ice_checkedCast(proxy, '::Smarthome::Lighting::IBlindsManager', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.Lighting.IBlindsManagerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Lighting::IBlindsManager'
    _M_Smarthome.Lighting._t_IBlindsManagerPrx = IcePy.defineProxy('::Smarthome::Lighting::IBlindsManager', IBlindsManagerPrx)

    _M_Smarthome.Lighting.IBlindsManagerPrx = IBlindsManagerPrx
    del IBlindsManagerPrx

    _M_Smarthome.Lighting.IBlindsManager = Ice.createTempClass()
    class IBlindsManager(_M_Smarthome.IDeviceStatusController):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::IDevice', '::Smarthome::IDeviceStatusController', '::Smarthome::Lighting::IBlindsManager')

        def ice_id(self, current=None):
            return '::Smarthome::Lighting::IBlindsManager'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Lighting::IBlindsManager'

        def draw(self, current=None):
            raise NotImplementedError("servant method 'draw' not implemented")

        def undraw(self, current=None):
            raise NotImplementedError("servant method 'undraw' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome.Lighting._t_IBlindsManagerDisp)

        __repr__ = __str__

    _M_Smarthome.Lighting._t_IBlindsManagerDisp = IcePy.defineClass('::Smarthome::Lighting::IBlindsManager', IBlindsManager, (), None, (_M_Smarthome._t_IDeviceStatusControllerDisp,))
    IBlindsManager._ice_type = _M_Smarthome.Lighting._t_IBlindsManagerDisp

    IBlindsManager._op_draw = IcePy.Operation('draw', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    IBlindsManager._op_undraw = IcePy.Operation('undraw', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Smarthome.Lighting.IBlindsManager = IBlindsManager
    del IBlindsManager

_M_Smarthome.Lighting._t_IPartialDrawBlindsManager = IcePy.defineValue('::Smarthome::Lighting::IPartialDrawBlindsManager', Ice.Value, -1, (), False, True, None, ())

if 'IPartialDrawBlindsManagerPrx' not in _M_Smarthome.Lighting.__dict__:
    _M_Smarthome.Lighting.IPartialDrawBlindsManagerPrx = Ice.createTempClass()
    class IPartialDrawBlindsManagerPrx(_M_Smarthome.IDeviceStatusControllerPrx):

        def drawTo(self, percent, context=None):
            return _M_Smarthome.Lighting.IPartialDrawBlindsManager._op_drawTo.invoke(self, ((percent, ), context))

        def drawToAsync(self, percent, context=None):
            return _M_Smarthome.Lighting.IPartialDrawBlindsManager._op_drawTo.invokeAsync(self, ((percent, ), context))

        def begin_drawTo(self, percent, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Lighting.IPartialDrawBlindsManager._op_drawTo.begin(self, ((percent, ), _response, _ex, _sent, context))

        def end_drawTo(self, _r):
            return _M_Smarthome.Lighting.IPartialDrawBlindsManager._op_drawTo.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.Lighting.IPartialDrawBlindsManagerPrx.ice_checkedCast(proxy, '::Smarthome::Lighting::IPartialDrawBlindsManager', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.Lighting.IPartialDrawBlindsManagerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Lighting::IPartialDrawBlindsManager'
    _M_Smarthome.Lighting._t_IPartialDrawBlindsManagerPrx = IcePy.defineProxy('::Smarthome::Lighting::IPartialDrawBlindsManager', IPartialDrawBlindsManagerPrx)

    _M_Smarthome.Lighting.IPartialDrawBlindsManagerPrx = IPartialDrawBlindsManagerPrx
    del IPartialDrawBlindsManagerPrx

    _M_Smarthome.Lighting.IPartialDrawBlindsManager = Ice.createTempClass()
    class IPartialDrawBlindsManager(_M_Smarthome.IDeviceStatusController):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::IDevice', '::Smarthome::IDeviceStatusController', '::Smarthome::Lighting::IPartialDrawBlindsManager')

        def ice_id(self, current=None):
            return '::Smarthome::Lighting::IPartialDrawBlindsManager'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Lighting::IPartialDrawBlindsManager'

        def drawTo(self, percent, current=None):
            raise NotImplementedError("servant method 'drawTo' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome.Lighting._t_IPartialDrawBlindsManagerDisp)

        __repr__ = __str__

    _M_Smarthome.Lighting._t_IPartialDrawBlindsManagerDisp = IcePy.defineClass('::Smarthome::Lighting::IPartialDrawBlindsManager', IPartialDrawBlindsManager, (), None, (_M_Smarthome._t_IDeviceStatusControllerDisp,))
    IPartialDrawBlindsManager._ice_type = _M_Smarthome.Lighting._t_IPartialDrawBlindsManagerDisp

    IPartialDrawBlindsManager._op_drawTo = IcePy.Operation('drawTo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, (_M_Smarthome._t_ExecutionException,))

    _M_Smarthome.Lighting.IPartialDrawBlindsManager = IPartialDrawBlindsManager
    del IPartialDrawBlindsManager

# End of module Smarthome.Lighting

__name__ = 'Smarthome'

# End of module Smarthome
